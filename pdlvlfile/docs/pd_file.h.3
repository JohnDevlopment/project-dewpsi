.TH "pd_file.h" 3 "Mon Apr 6 2020" "Version 1.0.5" "pdlvlfile" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pd_file.h \- Header file with functions for writing unformatted binary data to file\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "size_t \fBpdlvl_writebytes\fP (FILE *stream, const void *bytes, size_t count)"
.br
.RI "Writes an array of bytes to stream\&. "
.ti -1c
.RI "int \fBpdlvl_write8\fP (FILE *stream, uint8_t x)"
.br
.RI "Writes a single byte to stream\&. "
.ti -1c
.RI "int \fBpdlvl_writele16\fP (FILE *stream, uint16_t x)"
.br
.RI "Writes a little endian integer to stream\&. "
.ti -1c
.RI "int \fBpdlvl_writele32\fP (FILE *stream, uint32_t x)"
.br
.RI "Writes a 32 bit little endian integer to stream\&. "
.ti -1c
.RI "int \fBpdlvl_writebe32\fP (FILE *stream, uint32_t x)"
.br
.RI "Writes a big endian 32 bit integer to stream\&. "
.ti -1c
.RI "size_t \fBpdlvl_readbytes\fP (FILE *stream, void *ptr, size_t count, int *code)"
.br
.RI "Reads a number of bytes from stream\&. "
.ti -1c
.RI "uint8_t \fBpdlvl_read8\fP (FILE *stream, int *code)"
.br
.RI "Reads a single byte from stream\&. "
.ti -1c
.RI "uint16_t \fBpdlvl_readle16\fP (FILE *stream, int *code)"
.br
.RI "Reads a little endian 16 bit integer from stream\&. "
.ti -1c
.RI "uint32_t \fBpdlvl_readle32\fP (FILE *stream, int *code)"
.br
.RI "Reads a little endian 32 bit integer from stream\&. "
.ti -1c
.RI "uint32_t \fBpdlvl_readbe32\fP (FILE *stream, int *code)"
.br
.RI "Reads a big endian 32 bit integer from stream\&. "
.in -1c
.SH "Detailed Description"
.PP 
Header file with functions for writing unformatted binary data to file\&. 


.SH "Function Documentation"
.PP 
.SS "uint8_t pdlvl_read8 (FILE * stream, int * code)"

.PP
Reads a single byte from stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP Pointer to a FILE object that identifies the stream\&. 
.br
\fIcode\fP If not \fCNULL\fP, is filled with a success code (1 on success, 0 on failure)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
If successful, the integer from file; otherwise 0\&. 
.RE
.PP

.SS "uint32_t pdlvl_readbe32 (FILE * stream, int * code)"

.PP
Reads a big endian 32 bit integer from stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP Pointer to a FILE object that identifies the stream\&. 
.br
\fIcode\fP If not \fCNULL\fP, is filled with a success code (1 on success, 0 on failure)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
If successful, the integer from file; otherwise 0\&. 
.RE
.PP

.SS "size_t pdlvl_readbytes (FILE * stream, void * ptr, size_t count, int * code)"

.PP
Reads a number of bytes from stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP Pointer to a FILE object that identifies a stream\&. 
.br
\fIptr\fP Filled with the bytes from stream\&. 
.br
\fIcount\fP Number of bytes to read from stream\&. 
.br
\fIcode\fP If not \fCNULL\fP, is filled with a success code (1 on success, 0 on failure)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of bytes read from stream\&. 
.RE
.PP

.SS "uint16_t pdlvl_readle16 (FILE * stream, int * code)"

.PP
Reads a little endian 16 bit integer from stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP Pointer to a FILE object that identifies the stream\&. 
.br
\fIcode\fP If not \fCNULL\fP, is filled with a success code (1 on success, 0 on failure)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
If successful, the integer from file; otherwise 0\&. 
.RE
.PP

.SS "uint32_t pdlvl_readle32 (FILE * stream, int * code)"

.PP
Reads a little endian 32 bit integer from stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP Pointer to a FILE object that identifies the stream\&. 
.br
\fIcode\fP If not \fCNULL\fP, is filled with a success code (1 on success, 0 on failure)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
If successful, the integer from file; otherwise 0\&. 
.RE
.PP

.SS "int pdlvl_write8 (FILE * stream, uint8_t x)"

.PP
Writes a single byte to stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP Pointer to a FILE object that identifies the stream\&. 
.br
\fIx\fP Byte to write to stream\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on failure\&. 
.RE
.PP

.SS "int pdlvl_writebe32 (FILE * stream, uint32_t x)"

.PP
Writes a big endian 32 bit integer to stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP Pointer to a FILE object that identifies the stream\&. 
.br
\fIx\fP Integer in native byte order\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on failure\&. 
.RE
.PP

.SS "size_t pdlvl_writebytes (FILE * stream, const void * bytes, size_t count)"

.PP
Writes an array of bytes to stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP Pointer to a FILE object that identifies the stream\&. 
.br
\fIbytes\fP An array of \fBcount\fP bytes long\&. 
.br
\fIcount\fP Number of bytes to write to stream\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of bytes written to stream, \fBcount\fP if successful\&. 
.RE
.PP

.SS "int pdlvl_writele16 (FILE * stream, uint16_t x)"

.PP
Writes a little endian integer to stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP Pointer to a FILE object that identifies the stream\&. 
.br
\fIx\fP Integer in native byte order\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on failure\&. 
.RE
.PP

.SS "int pdlvl_writele32 (FILE * stream, uint32_t x)"

.PP
Writes a 32 bit little endian integer to stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP Pointer to a FILE object that identifies the stream\&. 
.br
\fIx\fP Integer in native byte order\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on failure\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for pdlvlfile from the source code\&.
