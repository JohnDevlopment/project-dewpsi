.TH PDLVL 3 2020-03-10 libpdlvl "Project Dewpsi Manuals"
.mso pd.tmac
.
.SH NAME
pdlvl_newempty, pdlvl_new, pdlvl_free, pdlvl_open, pdlvl_close,
pdlvl_numdivs, pdlvl_header, pdlvl_cheader, pdlvl_subdiv, pdlvl_csubdiv \- functions to allocate, free, or access memory with level data
.
.SH SYNOPSIS

.FA Level* pdlvl_newempty
\&
.
.FA Level* pdlvl_new size_t numdivs int* pdims
\&
.
.FA void pdlvl_free Level* ptr
\&
.
.FA FILE* pdlvl_open "const char*" file "const char*" mode
\&
.
.FA void pdlvl_close FILE* handle
\&
.
.FA int pdlvl_numdivs "const Level*" ptr
\&
.
.FA LevelHeader* pdlvl_header Level* ptr
\&
.
.FA LevelHeader* pdlvl_header -const "const Level*" ptr
\&
.
.FA LevelHeader* pdlvl_cheader -const "const Level*" ptr
\&
.
.FA SubArea* pdlvl_subdiv Level* lvl size_t idx int* pw int* ph Tile** pptiles
\&
.
.FA SubArea* pdlvl_csubdiv -const "const Level*" lvl size_t idx int* pw int* ph "const Tile**" pptiles
\&
.
.SH DESCRIPTION
.
.FA Level* pdlvl_newempty
Creates an empty level block,
with no sub-area.
.
.FA Level* pdlvl_new size_t numdivs int* pdims
Creates a level block with \fInumdivs\fP sub-divisions.
.AL
.AO numdivs
Number of sub-divisions in the level.
.AO pdims
Points to an array of integers.
The element count should be double \fInumdivs\fP.
.LA
.
.FA void pdlvl_free Level* ptr
Frees the level data
.I ptr .
.
.FA FILE* pdlvl_open "const char*" file "const char*" mode
Open a handle to the file denoted by
.I file .
.AL
.AO file
String denoting the path of a level file.
.AO mode
A string containing the file mode.
.LA
.
.FA void pdlvl_close FILE* handle
Closes the stream referenced in
.I handle .
.
.FA int pdlvl_numdivs "const Level*" ptr
Returns the number of sub-divisions.
.
.FA LevelHeader* pdlvl_header Level* ptr
Returns a pointer to the level header.
.
.FA LevelHeader* pdlvl_cheader -const "const Level*" ptr
Returns a constant pointer to the level header.
.
.FA SubArea* pdlvl_subdiv Level* lvl size_t idx int* pw int* ph Tile** pptiles
Retrieves information about a given sub-division in the level.
.AL
.AO lvl
A pointer to the level structure.
.AO idx
The sub-division to retrieve.
.AO pw
If non-null,
points to an integer filled with the width of the level.
.AO ph
If non-null,
points to an integer filled with the height of the level.
.AO pptiles
If non-null,
the referenced pointer is set to the address of the
.I idx 'th
sub-divisions.
.LA
.
.FA SubArea* pdlvl_csubdiv -const "const Level*" lvl size_t idx int* pw int* ph "const Tile**" pptiles
Retrieves information about a given sub-division in the level.
Said information is constant and thusly cannot be modified.
.AL
.AO lvl
A pointer to the read-only level structure.
.AO idx
The sub-division to retrieve.
.AO pw
If non-null,
points to an integer filled with the width of the level.
.AO ph
If non-null,
points to an integer filled with the height of the level.
.AO pptiles
If non-null,
the referenced pointer is set to the address of the
.I idx 'th
read-only sub-divisions.
.LA
.
.SH "RETURN VALUE"
.
.PP
.B pdlvl_newempty
returns a pointer to newly allocated, albeit empty, level data.
If the function returns
.CW NULL ,
that means an error has occurred.
Call
.I pdlvl_geterror
to retrieve the error message.

.B pdlvl_new
Returns a pointer to newly allocated level data,
with a given number of sub-divisions added to it.
If the return value is
.CW NULL ,
that means an error occurred.
In that case, call
.I pdlvl_geterror
to retrieve the error message.

.B pdlvl_open
returns a pointer to a FILE object which identifies a stream to a file.
If the return value is
.CW NULL ,
then an error has occurred.
In that case, call
.I pdlvl_geterror
to retrieve the error message.

.B pdlvl_numdivs
returns the number of sub-divisions in the level.

.BR "pdlvl_header " "and " pdlvl_cheader
both return pointers to the level header,
the latter of which is constant.
If either function returns
.CW NULL ,
that means the pointer argument was
.CW NULL .
Neither function sets an error with
.B pdlvl_seterror .

.BR "pdlvl_subdiv " "and " pdlvl_csubdiv
both return pointers to a given sub-division in the level,
the latter of which is constant.
.
.COLOPHON
